producer_name: "pytorch"
producer_version: "0.3"
graph {
  node {
    output: "1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: INT64
        raw_data: "d\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
    doc_string: "@torch.jit.script_method\ndef forward(self, x):\n    for _ in range(100):\n                   ~~~ <--- HERE\n        x = x + x\n    return x\n"
  }
  node {
    output: "2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: UINT8
        raw_data: "\001\000\000\000"
      }
      type: TENSOR
    }
    doc_string: "@torch.jit.script_method\ndef forward(self, x):\n    for _ in range(100):\n    ~~~~~~~~~~~~~~~~~~~~...  <--- HERE\n        x = x + x\n    return x\n"
  }
  node {
    input: "1"
    input: "2"
    input: "x.1"
    output: "3"
    op_type: "Loop"
    attribute {
      name: "body"
      g {
        node {
          input: "6"
          input: "6"
          output: "7"
          op_type: "Add"
          doc_string: "@torch.jit.script_method\ndef forward(self, x):\n    for _ in range(100):\n        x = x + x\n            ~~~~~ <--- HERE\n    return x\n"
        }
        node {
          output: "8"
          op_type: "Constant"
          attribute {
            name: "value"
            t {
              data_type: UINT8
              raw_data: "\001\000\000\000"
            }
            type: TENSOR
          }
          doc_string: "@torch.jit.script_method\ndef forward(self, x):\n    for _ in range(100):\n    ~~~~~~~~~~~~~~~~~~~~...  <--- HERE\n        x = x + x\n    return x\n"
        }
        name: "torch-jit-export1"
        input {
          name: "_"
          type {
            tensor_type {
              shape {
              }
            }
          }
        }
        input {
          name: "cond"
          type {
            tensor_type {
              shape {
              }
            }
          }
        }
        input {
          name: "6"
          type {
            tensor_type {
              shape {
              }
            }
          }
        }
        output {
          name: "8"
          type {
            tensor_type {
              elem_type: UINT8
              shape {
              }
            }
          }
        }
        output {
          name: "7"
          type {
            tensor_type {
              shape {
              }
            }
          }
        }
      }
      type: GRAPH
    }
    doc_string: "@torch.jit.script_method\ndef forward(self, x):\n    for _ in range(100):\n    ~~~~~~~~~~~~~~~~~~~~...  <--- HERE\n        x = x + x\n    return x\n"
  }
  name: "torch-jit-export"
  input {
    name: "x.1"
    type {
      tensor_type {
        elem_type: DOUBLE
        shape {
          dim {
            dim_value: 1
          }
          dim {
            dim_value: 2
          }
          dim {
            dim_value: 3
          }
        }
      }
    }
  }
  output {
    name: "3"
    type {
      tensor_type {
        elem_type: DOUBLE
        shape {
          dim {
            dim_value: 1
          }
          dim {
            dim_value: 2
          }
          dim {
            dim_value: 3
          }
        }
      }
    }
  }
}
opset_import {
  version: 6
}
