graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : UndefinedTensor
      %3 : UndefinedTensor
      %4 : UndefinedTensor
      %5 : UndefinedTensor
      %6 : UndefinedTensor
      %7 : UndefinedTensor
      %8 : UndefinedTensor
      %9 : UndefinedTensor
      %10 : UndefinedTensor
      %11 : UndefinedTensor
      %12 : Float(*, *)
      %13 : Float(*)
      %14 : Float(*)
      %15 : Float(*)
      %16 : Float(*, *)
      %17 : Float(*, *)
      %18 : Float(*, *)
      %Wx : Float(*, *)
      %20 : Float(*, *)
      %Uz : Float(*, *)
      %22 : Float(*, *)
      %23 : int[]
      %24 : int[]
      %25 : int[]
      %26 : int[]
      %27 : int[]
      %28 : int[]
      %ingate : Float(*, *)
      %forgetgate : Float(*, *)
      %cellgate : Float(*, *)
      %outgate : Float(*, *)
      %33 : int[]
      %34 : int[]
      %35 : Float(*, *)) {
  %36 : int = prim::Constant[value=1]()
  %37 : Float(*, *) = aten::mul(%0, %35)
  %38 : Tensor = aten::reduce_as(%37, %outgate)
  %39 : Float(*, *) = aten::mul(%0, %outgate)
  %40 : Tensor = aten::reduce_as(%39, %35)
  %41 : Tensor = prim::FusionGroup_0(%1, %40, %35)
  %42 : Tensor = prim::SumToSize(%41, %33)
  %43 : Tensor = prim::SumToSize(%41, %34)
  %44 : Tensor = aten::mul(%43, %cellgate)
  %45 : Tensor = aten::reduce_as(%44, %ingate)
  %46 : Tensor = aten::mul(%43, %ingate)
  %47 : Tensor = aten::reduce_as(%46, %cellgate)
  %48 : Tensor = aten::mul(%42, %12)
  %49 : Tensor = aten::reduce_as(%48, %forgetgate)
  %50 : Tensor = prim::FusionGroup_1(%45, %ingate, %49, %forgetgate, %47, %cellgate, %38, %outgate)
  %51 : Tensor = prim::SumToSize(%50, %28)
  %52 : Tensor = prim::SumToSize(%50, %26)
  %53 : Tensor = aten::mul(%52, %Uz)
  %54 : Tensor = aten::reduce_as(%53, %13)
  %55 : Tensor = aten::mul(%52, %13)
  %56 : Tensor = aten::reduce_as(%55, %Uz)
  %57 : Tensor = prim::SumToSize(%50, %23)
  %58 : Tensor = prim::SumToSize(%50, %24)
  %59 : Tensor = aten::mul(%58, %Wx)
  %60 : Tensor = aten::reduce_as(%59, %14)
  %61 : Tensor = aten::mul(%58, %14)
  %62 : Tensor = aten::reduce_as(%61, %Wx)
  %63 : Tensor = aten::mul(%57, %Uz)
  %64 : Tensor = aten::reduce_as(%63, %22)
  %65 : Tensor = aten::mul(%57, %22)
  %66 : Tensor = aten::reduce_as(%65, %Uz)
  %67 : Tensor = aten::add(%56, %66, %36)
  %68 : Tensor = aten::mul(%64, %Wx)
  %69 : Tensor = aten::reduce_as(%68, %15)
  %70 : Tensor = aten::mul(%64, %15)
  %71 : Tensor = aten::reduce_as(%70, %Wx)
  %72 : Tensor = aten::add(%62, %71, %36)
  %73 : Float(*, *) = aten::t(%16)
  %74 : Float(*, *) = aten::mm(%73, %67)
  %75 : Float(*, *) = aten::t(%74)
  %76 : Float(*, *) = aten::t(%17)
  %77 : Float(*, *) = aten::mm(%76, %72)
  %78 : Float(*, *) = aten::t(%77)
  return (%51, %54, %60, %69, %75, %78);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Tensor
      %2 : Float(*, *)) {
  %3 : Float(*, *) = aten::mul(%2, %2)
  %4 : Float(*, *) = aten::neg(%3)
  %5 : int = prim::Constant[value=1]()
  %6 : Float(*, *) = aten::add(%4, %5, %5)
  %7 : Tensor = aten::mul(%1, %6)
  %8 : int = prim::Constant[value=1]()
  %9 : Tensor = aten::add(%0, %7, %8)
  return (%9);
}
with prim::FusionGroup_1 = graph(%0 : Tensor
      %1 : Float(*, *)
      %2 : Tensor
      %3 : Float(*, *)
      %4 : Tensor
      %5 : Float(*, *)
      %6 : Tensor
      %7 : Float(*, *)) {
  %8 : Float(*, *) = aten::neg(%7)
  %9 : int = prim::Constant[value=1]()
  %10 : Float(*, *) = aten::add(%8, %9, %9)
  %11 : Float(*, *) = aten::mul(%10, %7)
  %12 : Tensor = aten::mul(%11, %6)
  %13 : Float(*, *) = aten::mul(%5, %5)
  %14 : Float(*, *) = aten::neg(%13)
  %15 : int = prim::Constant[value=1]()
  %16 : Float(*, *) = aten::add(%14, %15, %15)
  %17 : Tensor = aten::mul(%4, %16)
  %18 : Float(*, *) = aten::neg(%3)
  %19 : int = prim::Constant[value=1]()
  %20 : Float(*, *) = aten::add(%18, %19, %19)
  %21 : Float(*, *) = aten::mul(%20, %3)
  %22 : Tensor = aten::mul(%21, %2)
  %23 : Float(*, *) = aten::neg(%1)
  %24 : int = prim::Constant[value=1]()
  %25 : Float(*, *) = aten::add(%23, %24, %24)
  %26 : Float(*, *) = aten::mul(%25, %1)
  %27 : Tensor = aten::mul(%26, %0)
  %28 : Tensor = prim::FusedConcat[dim=1](%27, %22, %17, %12)
  return (%28);
}
