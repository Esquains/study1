graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : UndefinedTensor
      %3 : UndefinedTensor
      %4 : UndefinedTensor
      %5 : UndefinedTensor
      %6 : UndefinedTensor
      %7 : UndefinedTensor
      %8 : UndefinedTensor
      %9 : UndefinedTensor
      %10 : Float(*, *)
      %11 : Float(*)
      %12 : Float(*)
      %13 : Float(*)
      %14 : Float(*, *)
      %15 : Float(*, *)
      %Wx : Float(*, *)
      %Uz : Float(*, *)
      %18 : Float(*, *)
      %19 : int[]
      %20 : int[]
      %21 : int[]
      %22 : int[]
      %23 : int[]
      %24 : int[]
      %ingate : Float(*, *)
      %forgetgate : Float(*, *)
      %cellgate : Float(*, *)
      %outgate : Float(*, *)
      %29 : int[]
      %30 : int[]
      %31 : Float(*, *)) {
  %32 : int = prim::Constant[value=1]()
  %33 : int[] = aten::size(%outgate)
  %34 : int[] = aten::size(%31)
  %35 : int[] = aten::size(%ingate)
  %36 : int[] = aten::size(%cellgate)
  %37 : int[] = aten::size(%forgetgate)
  %38 : Tensor = prim::FusionGroup_0(%outgate, %0, %31, %33)
  %39 : Tensor, %40 : Tensor, %41 : Tensor = prim::FusionGroup_1(%10, %ingate, %cellgate, %1, %31, %0, %outgate, %forgetgate, %37, %29, %36, %35, %30, %34)
  %42 : Tensor[] = prim::ListConstruct(%41, %39, %40, %38)
  %43 : Tensor = aten::cat(%42, %32)
  %44 : Tensor = aten::_grad_sum_to_size(%43, %24)
  %45 : int[] = aten::size(%11)
  %46 : int[] = aten::size(%Uz)
  %47 : int[] = aten::size(%12)
  %48 : int[] = aten::size(%Wx)
  %49 : int[] = aten::size(%18)
  %50 : int[] = aten::size(%13)
  %51 : Tensor, %52 : Tensor, %53 : Tensor, %54 : Tensor, %55 : Tensor = prim::FusionGroup_2(%18, %Wx, %13, %Uz, %12, %43, %11, %46, %47, %50, %48, %49, %20, %19, %45, %22)
  %56 : Float(*, *) = aten::t(%14)
  %57 : Float(*, *) = aten::mm(%56, %51)
  %58 : Float(*, *) = aten::t(%57)
  %59 : Float(*, *) = aten::t(%15)
  %60 : Float(*, *) = aten::mm(%59, %54)
  %61 : Float(*, *) = aten::t(%60)
  return (%44, %55, %52, %53, %58, %61);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : Float(*, *)
      %3 : int[]) {
  %4 : int = prim::Constant[value=1]()
  %5 : Float(*, *) = aten::mul(%1, %2)
  %grad_self.1 : Tensor = aten::_grad_sum_to_size(%5, %3)
  %7 : Float(*, *) = aten::neg(%0)
  %8 : Float(*, *) = aten::add(%7, %4, %4)
  %9 : Float(*, *) = aten::mul(%8, %0)
  %10 : Tensor = aten::mul(%9, %grad_self.1)
  return (%10);
}
with prim::FusionGroup_1 = graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : Float(*, *)
      %3 : Float(*, *)
      %4 : Float(*, *)
      %5 : Float(*, *)
      %6 : Float(*, *)
      %7 : Float(*, *)
      %8 : int[]
      %9 : int[]
      %10 : int[]
      %11 : int[]
      %12 : int[]
      %13 : int[]) {
  %14 : int = prim::Constant[value=1]()
  %15 : Float(*, *) = aten::neg(%7)
  %16 : Float(*, *) = aten::add(%15, %14, %14)
  %17 : Float(*, *) = aten::mul(%16, %7)
  %18 : Float(*, *) = aten::mul(%2, %2)
  %19 : Float(*, *) = aten::neg(%18)
  %20 : Float(*, *) = aten::add(%19, %14, %14)
  %21 : Float(*, *) = aten::mul(%5, %6)
  %grad_other.1 : Tensor = aten::_grad_sum_to_size(%21, %13)
  %23 : Float(*, *) = aten::mul(%4, %4)
  %24 : Float(*, *) = aten::neg(%23)
  %25 : Float(*, *) = aten::add(%24, %14, %14)
  %26 : Tensor = aten::mul(%grad_other.1, %25)
  %27 : Tensor = aten::add(%3, %26, %14)
  %28 : Tensor = aten::_grad_sum_to_size(%27, %12)
  %29 : Tensor = aten::mul(%28, %2)
  %grad_self.3 : Tensor = aten::_grad_sum_to_size(%29, %11)
  %31 : Float(*, *) = aten::neg(%1)
  %32 : Float(*, *) = aten::add(%31, %14, %14)
  %33 : Float(*, *) = aten::mul(%32, %1)
  %34 : Tensor = aten::mul(%33, %grad_self.3)
  %35 : Tensor = aten::mul(%28, %1)
  %grad_other.3 : Tensor = aten::_grad_sum_to_size(%35, %10)
  %37 : Tensor = aten::mul(%grad_other.3, %20)
  %38 : Tensor = aten::_grad_sum_to_size(%27, %9)
  %39 : Tensor = aten::mul(%38, %0)
  %grad_self.5 : Tensor = aten::_grad_sum_to_size(%39, %8)
  %41 : Tensor = aten::mul(%17, %grad_self.5)
  return (%41, %37, %34);
}
with prim::FusionGroup_2 = graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : Float(*)
      %3 : Float(*, *)
      %4 : Float(*)
      %5 : Tensor
      %6 : Float(*)
      %7 : int[]
      %8 : int[]
      %9 : int[]
      %10 : int[]
      %11 : int[]
      %12 : int[]
      %13 : int[]
      %14 : int[]
      %15 : int[]) {
  %16 : int = prim::Constant[value=1]()
  %17 : Tensor = aten::_grad_sum_to_size(%5, %15)
  %18 : Tensor = aten::mul(%17, %6)
  %grad_other.7 : Tensor = aten::_grad_sum_to_size(%18, %7)
  %20 : Tensor = aten::mul(%17, %3)
  %grad_self.7 : Tensor = aten::_grad_sum_to_size(%20, %14)
  %22 : Tensor = aten::_grad_sum_to_size(%5, %13)
  %23 : Tensor = aten::_grad_sum_to_size(%5, %12)
  %24 : Tensor = aten::mul(%23, %4)
  %grad_other.9 : Tensor = aten::_grad_sum_to_size(%24, %10)
  %26 : Tensor = aten::mul(%22, %3)
  %grad_self.11 : Tensor = aten::_grad_sum_to_size(%26, %11)
  %28 : Tensor = aten::mul(%grad_self.11, %2)
  %grad_other.13 : Tensor = aten::_grad_sum_to_size(%28, %10)
  %30 : Tensor = aten::add(%grad_other.9, %grad_other.13, %16)
  %31 : Tensor = aten::mul(%grad_self.11, %1)
  %grad_self.13 : Tensor = aten::_grad_sum_to_size(%31, %9)
  %33 : Tensor = aten::mul(%23, %1)
  %grad_self.9 : Tensor = aten::_grad_sum_to_size(%33, %8)
  %35 : Tensor = aten::mul(%22, %0)
  %grad_other.11 : Tensor = aten::_grad_sum_to_size(%35, %7)
  %37 : Tensor = aten::add(%grad_other.7, %grad_other.11, %16)
  return (%37, %grad_self.9, %grad_self.13, %30, %grad_self.7);
}
