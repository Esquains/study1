graph(%a_1_data : Dynamic
      %a_1_mask : Dynamic
      %a_1_dims : Dynamic
      %b_data : Dynamic
      %b_mask : Dynamic
      %b_dims : Dynamic) {
  %6 : int = prim::Constant[value=1]()
  %7 : float = prim::Constant[value=0.1]()
  %8 : Float() = prim::NumToTensor(%7)
  %other : float = prim::TensorToNum(%8)
  %10 : Dynamic = aten::gt(%a_1_data, %other)
  %11 : bool = prim::TensorToBool(%10)
  %12 : Long() = prim::NumToTensor(%6)
  %alpha : float = prim::TensorToNum(%12)
  %data_1 : Dynamic = aten::add(%a_1_data, %b_data, %alpha)
  %mask : Dynamic = aten::mul(%a_1_mask, %b_mask)
  %dims : Dynamic = aten::__or__(%a_1_dims, %b_dims)
  %17 : bool = prim::Constant[value=1]()
  %18 : int = prim::Constant[value=1]()
  %19 : Dynamic = aten::type_as(%a_1_mask, %10)
  %cond_mask_1 : Dynamic = aten::mul(%10, %19)
  %21 : int = aten::dim(%cond_mask_1)
  %22 : bool = aten::eq(%21, %18)
  %cond_data : Dynamic, %cond_mask : Dynamic, %data : Dynamic = prim::If(%22)
    block0() {
      %26 : int = aten::dim(%data_1)
      %27 : int = aten::sub(%26, %18)
      %data_3 : Dynamic = prim::Loop(%27, %17, %cond_mask_1)
        block0(%_ : int, %30 : Dynamic) {
          %31 : int = aten::dim(%30)
          %data_2 : Dynamic = aten::unsqueeze(%30, %31)
          -> (%17, %data_2)
        }
      %cond_data_1 : Dynamic = aten::expand_as(%data_3, %data_1)
      %cond_mask_2 : Dynamic = aten::expand_as(%data_3, %mask)
      -> (%cond_data_1, %cond_mask_2, %data_3)
    }
    block1() {
      -> (%cond_mask_1, %cond_mask_1, %cond_mask_1)
    }
  %res_data : Dynamic = aten::where(%cond_data, %data_1, %a_1_data)
  %res_mask : Dynamic = aten::where(%cond_mask, %mask, %a_1_mask)
  %res_dims : Dynamic = aten::__or__(%dims, %a_1_dims)
  return (%res_data, %res_mask, %res_dims);
}
