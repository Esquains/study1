graph(%x : Float(*, *)
      %hx : Float(*, *)
      %cx : Float(*, *)
      %w_ih : Float(*, *)
      %w_hh : Float(*, *)
      %b_ih : Float(*)
      %b_hh : Float(*)) {
  %hy : Float(*, *), %cy : Float(*, *) = prim::DifferentiableGraph_0(%cx, %b_hh, %b_ih, %hx, %w_hh, %x, %w_ih)
  return (%hy, %cy);
}
with prim::DifferentiableGraph_0 = graph(%0 : Float(*, *)
      %1 : Float(*)
      %2 : Float(*)
      %3 : Float(*, *)
      %4 : Float(*, *)
      %5 : Float(*, *)
      %6 : Float(*, *)) {
  %7 : Float(*, *) = aten::t(%6)
  %8 : Float(*, *) = aten::mm(%5, %7)
  %9 : Float(*, *) = aten::t(%4)
  %10 : Float(*, *) = aten::mm(%3, %9)
<<<<<<< HEAD
  %11 : int = prim::Constant[value=1]()
  %12 : int[] = aten::size(%8)
  %13 : int[] = aten::size(%10)
  %14 : int[] = aten::size(%2)
  %15 : Float(*, *), %16 : Float(*, *) = prim::FusionGroup_0(%2, %8, %10)
  %17 : int[] = aten::size(%16)
  %18 : int[] = aten::size(%15)
  %19 : int[] = aten::size(%1)
  %20 : Tensor[] = prim::ListConstruct(%15, %1)
  %21 : Tensor[] = aten::broadcast_tensors(%20)
  %22 : Tensor, %23 : Tensor = prim::ListUnpack(%21)
  %24 : int[] = aten::size(%0)
  %hy : Float(*, *), %26 : Float(*, *), %cy : Float(*, *), %28 : Float(*, *), %29 : Float(*, *), %outgate.1 : Float(*, *), %cellgate.1 : Float(*, *), %forgetgate.1 : Float(*, *), %ingate.1 : Float(*, *) = prim::FusionGroup_1(%0, %23, %22)
  %34 : int[] = aten::size(%ingate.1)
  %35 : int[] = aten::size(%forgetgate.1)
  %36 : int[] = aten::size(%cellgate.1)
  %37 : int[] = aten::size(%outgate.1)
  %38 : int[] = aten::size(%29)
  %39 : int[] = aten::size(%28)
  %40 : int[] = aten::size(%26)
  return (%hy, %cy, %7, %9, %12, %13, %17, %14, %18, %19, %ingate.1, %forgetgate.1, %cellgate.1, %outgate.1, %35, %24, %34, %36, %38, %39, %26, %37, %40);
}
with prim::FusionGroup_0 = graph(%0 : Float(*)
      %1 : Float(*, *)
      %2 : Float(*, *)) {
  %3 : int = prim::Constant[value=1]()
  %4 : Float(*, *) = aten::add(%1, %2, %3)
  %5 : int = prim::Constant[value=1]()
  %6 : Float(*, *) = aten::add(%4, %0, %5)
  return (%6, %4);
}
with prim::FusionGroup_1 = graph(%0 : Float(*, *)
      %1 : Tensor
      %2 : Tensor) {
  %3 : Float(*, *), %4 : Float(*, *), %5 : Float(*, *), %6 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%2)
  %7 : Float(*, *), %8 : Float(*, *), %9 : Float(*, *), %10 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%1)
  %11 : int = prim::Constant[value=1]()
  %12 : Float(*, *) = aten::add(%3, %7, %11)
  %13 : int = prim::Constant[value=1]()
  %14 : Float(*, *) = aten::add(%4, %8, %13)
  %15 : int = prim::Constant[value=1]()
  %16 : Float(*, *) = aten::add(%5, %9, %15)
  %17 : int = prim::Constant[value=1]()
  %18 : Float(*, *) = aten::add(%6, %10, %17)
  %ingate.1 : Float(*, *) = aten::sigmoid(%12)
  %forgetgate.1 : Float(*, *) = aten::sigmoid(%14)
  %cellgate.1 : Float(*, *) = aten::tanh(%16)
  %outgate.1 : Float(*, *) = aten::sigmoid(%18)
  %23 : Float(*, *) = aten::mul(%forgetgate.1, %0)
  %24 : Float(*, *) = aten::mul(%ingate.1, %cellgate.1)
=======
  %11 : int[] = aten::size(%8)
  %12 : int[] = aten::size(%10)
  %13 : int[] = aten::size(%2)
  %14 : int[] = aten::size(%1)
  %15 : Dynamic[] = prim::ListConstruct(%1, %2, %8, %10)
  %16 : Dynamic[] = aten::broadcast_tensors(%15)
  %17 : Dynamic, %18 : Dynamic, %19 : Dynamic, %20 : Dynamic = prim::ListUnpack(%16)
  %21 : int[] = prim::BroadcastSizes(%11, %12)
  %22 : int[] = prim::BroadcastSizes(%21, %13)
  %23 : int[] = aten::size(%0)
  %hy : Float(*, *), %25 : Float(*, *), %cy : Float(*, *), %outgate.1 : Float(*, *), %cellgate.1 : Float(*, *), %forgetgate.1 : Float(*, *), %ingate.1 : Float(*, *) = prim::FusionGroup_0(%0, %20, %19, %18, %17)
  %31 : int[] = aten::size(%25)
  %32 : int[] = aten::size(%outgate.1)
  %33 : int[] = aten::size(%cellgate.1)
  %34 : int[] = aten::size(%forgetgate.1)
  %35 : int[] = aten::size(%ingate.1)
  %36 : int[] = prim::BroadcastSizes(%34, %23)
  %37 : int[] = prim::BroadcastSizes(%35, %33)
  return (%hy, %cy, %7, %9, %11, %12, %21, %13, %22, %14, %ingate.1, %forgetgate.1, %cellgate.1, %outgate.1, %34, %23, %35, %33, %36, %37, %25, %32, %31);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Dynamic
      %2 : Dynamic
      %3 : Dynamic
      %4 : Dynamic) {
  %5 : Float(*, *), %6 : Float(*, *), %7 : Float(*, *), %8 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%4)
  %9 : Float(*, *), %10 : Float(*, *), %11 : Float(*, *), %12 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%3)
  %13 : Float(*, *), %14 : Float(*, *), %15 : Float(*, *), %16 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%2)
  %17 : Float(*, *), %18 : Float(*, *), %19 : Float(*, *), %20 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%1)
  %21 : int = prim::Constant[value=1]()
  %22 : Float(*, *) = aten::add(%13, %17, %21)
  %23 : int = prim::Constant[value=1]()
  %24 : Float(*, *) = aten::add(%14, %18, %23)
>>>>>>> 698d9f8... Adapt the graph fuser to work with aten::size
  %25 : int = prim::Constant[value=1]()
  %26 : Float(*, *) = aten::add(%15, %19, %25)
  %27 : int = prim::Constant[value=1]()
  %28 : Float(*, *) = aten::add(%16, %20, %27)
  %29 : int = prim::Constant[value=1]()
  %30 : Float(*, *) = aten::add(%22, %9, %29)
  %31 : int = prim::Constant[value=1]()
  %32 : Float(*, *) = aten::add(%24, %10, %31)
  %33 : int = prim::Constant[value=1]()
  %34 : Float(*, *) = aten::add(%26, %11, %33)
  %35 : int = prim::Constant[value=1]()
  %36 : Float(*, *) = aten::add(%28, %12, %35)
  %37 : int = prim::Constant[value=1]()
  %38 : Float(*, *) = aten::add(%30, %5, %37)
  %39 : int = prim::Constant[value=1]()
  %40 : Float(*, *) = aten::add(%32, %6, %39)
  %41 : int = prim::Constant[value=1]()
  %42 : Float(*, *) = aten::add(%34, %7, %41)
  %43 : int = prim::Constant[value=1]()
  %44 : Float(*, *) = aten::add(%36, %8, %43)
  %ingate.1 : Float(*, *) = aten::sigmoid(%38)
  %forgetgate.1 : Float(*, *) = aten::sigmoid(%40)
  %cellgate.1 : Float(*, *) = aten::tanh(%42)
  %outgate.1 : Float(*, *) = aten::sigmoid(%44)
  %49 : Float(*, *) = aten::mul(%forgetgate.1, %0)
  %50 : Float(*, *) = aten::mul(%ingate.1, %cellgate.1)
  %51 : int = prim::Constant[value=1]()
  %cy : Float(*, *) = aten::add(%49, %50, %51)
  %53 : Float(*, *) = aten::tanh(%cy)
  %hy : Float(*, *) = aten::mul(%outgate.1, %53)
  return (%hy, %53, %cy, %outgate.1, %cellgate.1, %forgetgate.1, %ingate.1);
}
