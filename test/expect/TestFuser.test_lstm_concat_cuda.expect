graph(%input_1 : Float(*, *)
      %input : Float(*, *)
      %cx : Float(*, *)
      %weight_1 : Float(*, *)
      %weight : Float(*, *)
      %bias_1 : Float(*)
      %bias : Float(*)) {
  %7 : Float(*, *) = aten::t(%weight_1)
  %8 : Float(*, *) = aten::mm(%input_1, %7)
  %9 : Float(*, *) = aten::t(%weight)
  %10 : Float(*, *) = aten::mm(%input, %9)
  %11 : Tensor[] = prim::ListConstruct(%bias_1, %8, %bias, %10)
  %12 : Tensor[] = aten::broadcast_tensors(%11)
  %13 : Tensor, %14 : Tensor, %15 : Tensor, %16 : Tensor = prim::ListUnpack(%12)
  %17 : Float(*, *) = prim::FusionGroup_0(%cx, %16, %15, %14, %13)
  return (%17);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Tensor
      %2 : Tensor
      %3 : Tensor
      %4 : Tensor) {
  %5 : Float(*, *), %6 : Float(*, *), %7 : Float(*, *), %8 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%4)
  %9 : Float(*, *), %10 : Float(*, *), %11 : Float(*, *), %12 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%3)
  %13 : Float(*, *), %14 : Float(*, *), %15 : Float(*, *), %16 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%2)
  %17 : Float(*, *), %18 : Float(*, *), %19 : Float(*, *), %20 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%1)
  %21 : int = prim::Constant[value=1]()
  %22 : int = prim::Constant[value=1]()
  %23 : Float(*, *) = aten::add(%13, %17, %22)
  %24 : int = prim::Constant[value=1]()
  %25 : int = prim::Constant[value=1]()
  %26 : Float(*, *) = aten::add(%14, %18, %25)
  %27 : int = prim::Constant[value=1]()
  %28 : int = prim::Constant[value=1]()
  %29 : Float(*, *) = aten::add(%15, %19, %28)
  %30 : int = prim::Constant[value=1]()
  %31 : int = prim::Constant[value=1]()
  %32 : Float(*, *) = aten::add(%16, %20, %31)
  %33 : int = prim::Constant[value=1]()
  %34 : int = prim::Constant[value=1]()
  %35 : Float(*, *) = aten::add(%5, %9, %34)
  %36 : int = prim::Constant[value=1]()
  %37 : int = prim::Constant[value=1]()
  %38 : Float(*, *) = aten::add(%6, %10, %37)
  %39 : int = prim::Constant[value=1]()
  %40 : int = prim::Constant[value=1]()
  %41 : Float(*, *) = aten::add(%7, %11, %40)
  %42 : int = prim::Constant[value=1]()
  %43 : int = prim::Constant[value=1]()
  %44 : Float(*, *) = aten::add(%8, %12, %43)
  %45 : int = prim::Constant[value=1]()
  %46 : int = prim::Constant[value=1]()
  %47 : Float(*, *) = aten::add(%35, %23, %46)
  %48 : int = prim::Constant[value=1]()
  %49 : int = prim::Constant[value=1]()
  %50 : Float(*, *) = aten::add(%38, %26, %49)
  %51 : int = prim::Constant[value=1]()
  %52 : int = prim::Constant[value=1]()
  %53 : Float(*, *) = aten::add(%41, %29, %52)
  %54 : int = prim::Constant[value=1]()
  %55 : int = prim::Constant[value=1]()
  %56 : Float(*, *) = aten::add(%44, %32, %55)
  %ingate : Float(*, *) = aten::sigmoid(%47)
  %forgetgate : Float(*, *) = aten::sigmoid(%50)
  %cellgate : Float(*, *) = aten::tanh(%53)
  %outgate : Float(*, *) = aten::sigmoid(%56)
  %61 : Float(*, *) = aten::mul(%forgetgate, %0)
  %62 : Float(*, *) = aten::mul(%ingate, %cellgate)
  %63 : int = prim::Constant[value=1]()
  %64 : int = prim::Constant[value=1]()
  %cy : Float(*, *) = aten::add(%61, %62, %64)
  %66 : Float(*, *) = aten::tanh(%cy)
  %hy : Float(*, *) = aten::mul(%outgate, %66)
  %68 : Float(*, *) = prim::FusedConcat[dim=0](%hy, %cy)
  return (%68);
}
