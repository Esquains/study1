graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : UndefinedTensor
      %3 : UndefinedTensor
      %4 : UndefinedTensor
      %5 : UndefinedTensor
      %6 : UndefinedTensor
      %7 : UndefinedTensor
      %8 : UndefinedTensor
      %9 : UndefinedTensor
      %10 : UndefinedTensor
      %11 : UndefinedTensor
      %12 : Float(*, *)
      %13 : Float(*)
      %14 : Float(*)
      %15 : Float(*)
      %16 : Float(*, *)
      %17 : Float(*, *)
      %18 : Float(*, *)
      %Wx : Float(*, *)
      %20 : Float(*, *)
      %Uz : Float(*, *)
      %22 : Float(*, *)
      %23 : int[]
      %24 : int[]
      %25 : int[]
      %26 : int[]
      %27 : int[]
      %28 : int[]
      %ingate : Float(*, *)
      %forgetgate : Float(*, *)
      %cellgate : Float(*, *)
      %outgate : Float(*, *)
      %33 : int[]
      %34 : int[]
      %35 : Float(*, *)) {
  %36 : int[] = aten::size(%outgate)
  %37 : int[] = aten::size(%cellgate)
  %38 : int[] = aten::size(%ingate)
  %39 : int[] = aten::size(%forgetgate)
  %40 : int[] = aten::size(%13)
  %41 : int[] = aten::size(%14)
  %42 : int[] = aten::size(%Uz)
  %43 : int[] = aten::size(%22)
  %44 : int[] = aten::size(%Wx)
  %45 : int[] = aten::size(%15)
  %46 : Float(*, *) = aten::mul(%0, %35)
  %47 : Tensor = prim::GradSumToSize(%46, %36)
  %48 : Tensor, %49 : Tensor, %50 : Tensor = prim::FusionGroup_0(%cellgate, %ingate, %12, %1, %35, %0, %outgate)
  %51 : Tensor = prim::GradSumToSize(%48, %34)
  %52 : Tensor = prim::GradSumToSize(%49, %34)
  %53 : Tensor = prim::GradSumToSize(%50, %33)
  %54 : Tensor = prim::GradSumToSize(%51, %38)
  %55 : Tensor = prim::GradSumToSize(%52, %37)
  %56 : Tensor = prim::GradSumToSize(%53, %39)
  %57 : Tensor = prim::FusionGroup_1(%54, %ingate, %56, %forgetgate, %55, %cellgate, %47, %outgate)
  %58 : Tensor = prim::GradSumToSize(%57, %28)
  %59 : Tensor, %60 : Tensor, %61 : Tensor, %62 : Tensor, %63 : Tensor = prim::FusionGroup_2(%22, %Wx, %15, %Uz, %14, %57, %13)
  %64 : Tensor = prim::GradSumToSize(%59, %42)
  %65 : Tensor = prim::GradSumToSize(%60, %24)
  %66 : Tensor = prim::GradSumToSize(%61, %43)
  %67 : Tensor = prim::GradSumToSize(%62, %44)
  %68 : Tensor = prim::GradSumToSize(%63, %26)
  %69 : Tensor = prim::GradSumToSize(%68, %40)
  %70 : Tensor = prim::GradSumToSize(%65, %41)
  %71 : Tensor = prim::GradSumToSize(%66, %45)
  %72 : Float(*, *) = aten::t(%16)
  %73 : Float(*, *) = aten::mm(%72, %64)
  %74 : Float(*, *) = aten::t(%73)
  %75 : Float(*, *) = aten::t(%17)
  %76 : Float(*, *) = aten::mm(%75, %67)
  %77 : Float(*, *) = aten::t(%76)
  return (%58, %69, %70, %71, %74, %77);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : Float(*, *)
      %3 : Float(*, *)
      %4 : Float(*, *)
      %5 : Float(*, *)
      %6 : Float(*, *)) {
  %7 : Float(*, *) = aten::mul(%5, %6)
  %8 : Float(*, *) = aten::mul(%4, %4)
  %9 : Float(*, *) = aten::neg(%8)
  %10 : int = prim::Constant[value=1]()
  %11 : int = prim::Constant[value=1]()
  %12 : int = prim::Constant[value=1]()
  %13 : Float(*, *) = aten::add(%9, %12, %12)
  %14 : Tensor = aten::mul(%7, %13)
  %15 : int = prim::Constant[value=1]()
  %16 : int = prim::Constant[value=1]()
  %17 : int = prim::Constant[value=1]()
  %18 : Tensor = aten::add(%3, %14, %17)
  %19 : Tensor = aten::mul(%18, %2)
  %20 : Tensor = aten::mul(%18, %1)
  %21 : Tensor = aten::mul(%18, %0)
  return (%21, %20, %19);
}
with prim::FusionGroup_1 = graph(%0 : Tensor
      %1 : Float(*, *)
      %2 : Tensor
      %3 : Float(*, *)
      %4 : Tensor
      %5 : Float(*, *)
      %6 : Tensor
      %7 : Float(*, *)) {
  %8 : Float(*, *) = aten::neg(%7)
  %9 : int = prim::Constant[value=1]()
  %10 : Float(*, *) = aten::add(%8, %9, %9)
  %11 : Float(*, *) = aten::mul(%10, %7)
  %12 : Tensor = aten::mul(%11, %6)
  %13 : Float(*, *) = aten::mul(%5, %5)
  %14 : Float(*, *) = aten::neg(%13)
  %15 : int = prim::Constant[value=1]()
  %16 : Float(*, *) = aten::add(%14, %15, %15)
  %17 : Tensor = aten::mul(%4, %16)
  %18 : Float(*, *) = aten::neg(%3)
  %19 : int = prim::Constant[value=1]()
  %20 : Float(*, *) = aten::add(%18, %19, %19)
  %21 : Float(*, *) = aten::mul(%20, %3)
  %22 : Tensor = aten::mul(%21, %2)
  %23 : Float(*, *) = aten::neg(%1)
  %24 : int = prim::Constant[value=1]()
  %25 : Float(*, *) = aten::add(%23, %24, %24)
  %26 : Float(*, *) = aten::mul(%25, %1)
  %27 : Tensor = aten::mul(%26, %0)
  %28 : Tensor = prim::FusedConcat[dim=1](%27, %22, %17, %12)
  return (%28);
}
with prim::FusionGroup_2 = graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : Float(*)
      %3 : Float(*, *)
      %4 : Float(*)
      %5 : Tensor
      %6 : Float(*)) {
  %7 : Tensor = aten::mul(%5, %6)
  %8 : Tensor = aten::mul(%5, %3)
  %9 : Tensor = aten::mul(%5, %4)
  %10 : Tensor = aten::mul(%5, %3)
  %11 : Tensor = aten::mul(%10, %2)
  %12 : int = prim::Constant[value=1]()
  %13 : int = prim::Constant[value=1]()
  %14 : int = prim::Constant[value=1]()
  %15 : int = prim::Constant[value=1]()
  %16 : Tensor = aten::add(%9, %11, %15)
  %17 : Tensor = aten::mul(%10, %1)
  %18 : Tensor = aten::mul(%5, %1)
  %19 : Tensor = aten::mul(%5, %0)
  %20 : int = prim::Constant[value=1]()
  %21 : Tensor = aten::add(%7, %19, %20)
  return (%21, %18, %17, %16, %8);
}
