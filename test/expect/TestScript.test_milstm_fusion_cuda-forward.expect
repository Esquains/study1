graph(%x : Float(*, *)
      %hx : Float(*, *)
      %cx : Float(*, *)
      %w_ih : Float(*, *)
      %w_hh : Float(*, *)
      %alpha : Float(*)
      %beta_i : Float(*)
      %beta_h : Float(*)
      %bias : Float(*)) {
  %hy : Float(*, *), %cy : Float(*, *) = prim::DifferentiableGraph_0(%cx, %bias, %beta_h, %beta_i, %alpha, %hx, %w_hh, %x, %w_ih)
  return (%hy, %cy);
}
with prim::DifferentiableGraph_0 = graph(%0 : Float(*, *)
      %1 : Float(*)
      %2 : Float(*)
      %3 : Float(*)
      %4 : Float(*)
      %5 : Float(*, *)
      %6 : Float(*, *)
      %7 : Float(*, *)
      %8 : Float(*, *)) {
  %9 : Float(*, *) = aten::t(%8)
  %Wx.1 : Float(*, *) = aten::mm(%7, %9)
  %11 : Float(*, *) = aten::t(%6)
  %Uz.1 : Float(*, *) = aten::mm(%5, %11)
<<<<<<< 4c11dee0e82c5877eb629533d6aca2e32d2193b6
  %13 : Float(*, *) = aten::mul(%4, %Wx.1)
  %14 : int = prim::Constant[value=1]()
  %15 : Tensor[] = prim::ListConstruct(%1, %2, %Uz.1, %13, %3, %Wx.1)
  %16 : Tensor[] = aten::broadcast_tensors(%15)
  %17 : Tensor, %18 : Tensor, %19 : Tensor, %20 : Tensor, %21 : Tensor, %22 : Tensor = prim::ListUnpack(%16)
  %hy : Float(*, *), %24 : Float(*, *), %cy : Float(*, *), %outgate.1 : Float(*, *), %cellgate.1 : Float(*, *), %forgetgate.1 : Float(*, *), %ingate.1 : Float(*, *) = prim::FusionGroup_0(%0, %22, %21, %20, %19, %18, %17)
  return (%hy, %cy, %9, %Wx.1, %11, %Uz.1, %13, %ingate.1, %forgetgate.1, %cellgate.1, %outgate.1, %24);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Tensor
      %2 : Tensor
      %3 : Tensor
      %4 : Tensor
      %5 : Tensor
      %6 : Tensor) {
  %7 : Float(*, *), %8 : Float(*, *), %9 : Float(*, *), %10 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%6)
  %11 : Float(*, *), %12 : Float(*, *), %13 : Float(*, *), %14 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%5)
  %15 : Float(*, *), %16 : Float(*, *), %17 : Float(*, *), %18 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%4)
  %19 : Float(*, *), %20 : Float(*, *), %21 : Float(*, *), %22 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%3)
  %23 : Float(*, *), %24 : Float(*, *), %25 : Float(*, *), %26 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%2)
  %27 : Float(*, *), %28 : Float(*, *), %29 : Float(*, *), %30 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%1)
  %31 : Float(*, *) = aten::mul(%23, %27)
  %32 : Float(*, *) = aten::mul(%24, %28)
  %33 : Float(*, *) = aten::mul(%25, %29)
  %34 : Float(*, *) = aten::mul(%26, %30)
  %35 : Float(*, *) = aten::mul(%19, %15)
  %36 : Float(*, *) = aten::mul(%20, %16)
  %37 : Float(*, *) = aten::mul(%21, %17)
  %38 : Float(*, *) = aten::mul(%22, %18)
  %39 : Float(*, *) = aten::mul(%11, %15)
  %40 : Float(*, *) = aten::mul(%12, %16)
  %41 : Float(*, *) = aten::mul(%13, %17)
  %42 : Float(*, *) = aten::mul(%14, %18)
  %43 : int = prim::Constant[value=1]()
  %44 : Float(*, *) = aten::add(%35, %31, %43)
  %45 : int = prim::Constant[value=1]()
  %46 : Float(*, *) = aten::add(%36, %32, %45)
  %47 : int = prim::Constant[value=1]()
  %48 : Float(*, *) = aten::add(%37, %33, %47)
  %49 : int = prim::Constant[value=1]()
  %50 : Float(*, *) = aten::add(%38, %34, %49)
  %51 : int = prim::Constant[value=1]()
  %52 : Float(*, *) = aten::add(%44, %39, %51)
  %53 : int = prim::Constant[value=1]()
  %54 : Float(*, *) = aten::add(%46, %40, %53)
  %55 : int = prim::Constant[value=1]()
  %56 : Float(*, *) = aten::add(%48, %41, %55)
  %57 : int = prim::Constant[value=1]()
  %58 : Float(*, *) = aten::add(%50, %42, %57)
  %59 : int = prim::Constant[value=1]()
  %60 : Float(*, *) = aten::add(%52, %7, %59)
  %61 : int = prim::Constant[value=1]()
  %62 : Float(*, *) = aten::add(%54, %8, %61)
  %63 : int = prim::Constant[value=1]()
  %64 : Float(*, *) = aten::add(%56, %9, %63)
  %65 : int = prim::Constant[value=1]()
  %66 : Float(*, *) = aten::add(%58, %10, %65)
  %ingate.1 : Float(*, *) = aten::sigmoid(%60)
  %forgetgate.1 : Float(*, *) = aten::sigmoid(%62)
  %cellgate.1 : Float(*, *) = aten::tanh(%64)
  %outgate.1 : Float(*, *) = aten::sigmoid(%66)
  %71 : Float(*, *) = aten::mul(%forgetgate.1, %0)
  %72 : Float(*, *) = aten::mul(%ingate.1, %cellgate.1)
  %73 : int = prim::Constant[value=1]()
  %cy : Float(*, *) = aten::add(%71, %72, %73)
  %75 : Float(*, *) = aten::tanh(%cy)
  %hy : Float(*, *) = aten::mul(%outgate.1, %75)
  return (%hy, %75, %cy, %outgate.1, %cellgate.1, %forgetgate.1, %ingate.1);
=======
  %13 : int[] = aten::size(%4)
  %14 : int[] = aten::size(%Wx.1)
  %15 : int[] = aten::size(%Uz.1)
  %16 : int[] = aten::size(%3)
  %17 : int = prim::Constant[value=1]()
  %18 : int[] = aten::size(%2)
  %19 : Float(*, *), %20 : Float(*, *), %21 : Float(*, *), %22 : Float(*, *), %23 : Float(*, *), %24 : Float(*, *) = prim::FusionGroup_0(%2, %Uz.1, %3, %Wx.1, %4)
  %25 : int[] = aten::size(%24)
  %26 : int[] = aten::size(%23)
  %27 : int[] = aten::size(%22)
  %28 : int[] = aten::size(%21)
  %29 : int[] = aten::size(%20)
  %30 : int[] = aten::size(%19)
  %31 : int[] = aten::size(%1)
  %32 : Dynamic[] = prim::ListConstruct(%19, %1)
  %33 : Dynamic[] = aten::broadcast_tensors(%32)
  %34 : Dynamic, %35 : Dynamic = prim::ListUnpack(%33)
  %36 : int[] = aten::size(%0)
  %hy : Float(*, *), %38 : Float(*, *), %cy : Float(*, *), %40 : Float(*, *), %41 : Float(*, *), %outgate.1 : Float(*, *), %cellgate.1 : Float(*, *), %forgetgate.1 : Float(*, *), %ingate.1 : Float(*, *) = prim::FusionGroup_1(%0, %35, %34)
  %46 : int[] = aten::size(%ingate.1)
  %47 : int[] = aten::size(%forgetgate.1)
  %48 : int[] = aten::size(%cellgate.1)
  %49 : int[] = aten::size(%outgate.1)
  %50 : int[] = aten::size(%41)
  %51 : int[] = aten::size(%40)
  %52 : int[] = aten::size(%38)
  return (%hy, %cy, %9, %Wx.1, %11, %Uz.1, %13, %14, %24, %25, %15, %16, %14, %26, %27, %18, %15, %28, %29, %30, %31, %ingate.1, %forgetgate.1, %cellgate.1, %outgate.1, %47, %36, %46, %48, %50, %51, %38, %49, %52);
}
with prim::FusionGroup_0 = graph(%0 : Float(*)
      %1 : Float(*, *)
      %2 : Float(*)
      %3 : Float(*, *)
      %4 : Float(*)) {
  %5 : Float(*, *) = aten::mul(%4, %3)
  %6 : Float(*, *) = aten::mul(%5, %1)
  %7 : Float(*, *) = aten::mul(%2, %3)
  %8 : int = prim::Constant[value=1]()
  %9 : Float(*, *) = aten::add(%6, %7, %8)
  %10 : Float(*, *) = aten::mul(%0, %1)
  %11 : int = prim::Constant[value=1]()
  %12 : Float(*, *) = aten::add(%9, %10, %11)
  return (%12, %10, %9, %7, %6, %5);
}
with prim::FusionGroup_1 = graph(%0 : Float(*, *)
      %1 : Dynamic
      %2 : Dynamic) {
  %3 : Float(*, *), %4 : Float(*, *), %5 : Float(*, *), %6 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%2)
  %7 : Float(*, *), %8 : Float(*, *), %9 : Float(*, *), %10 : Float(*, *) = prim::ConstantChunk[chunks=4, dim=1](%1)
  %11 : int = prim::Constant[value=1]()
  %12 : Float(*, *) = aten::add(%3, %7, %11)
  %13 : int = prim::Constant[value=1]()
  %14 : Float(*, *) = aten::add(%4, %8, %13)
  %15 : int = prim::Constant[value=1]()
  %16 : Float(*, *) = aten::add(%5, %9, %15)
  %17 : int = prim::Constant[value=1]()
  %18 : Float(*, *) = aten::add(%6, %10, %17)
  %ingate.1 : Float(*, *) = aten::sigmoid(%12)
  %forgetgate.1 : Float(*, *) = aten::sigmoid(%14)
  %cellgate.1 : Float(*, *) = aten::tanh(%16)
  %outgate.1 : Float(*, *) = aten::sigmoid(%18)
  %23 : Float(*, *) = aten::mul(%forgetgate.1, %0)
  %24 : Float(*, *) = aten::mul(%ingate.1, %cellgate.1)
  %25 : int = prim::Constant[value=1]()
  %cy : Float(*, *) = aten::add(%23, %24, %25)
  %27 : Float(*, *) = aten::tanh(%cy)
  %hy : Float(*, *) = aten::mul(%outgate.1, %27)
  return (%hy, %27, %cy, %24, %23, %outgate.1, %cellgate.1, %forgetgate.1, %ingate.1);
>>>>>>> Reduce broadcasted inputs in derivative code
}
