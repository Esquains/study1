//// --------------------------
//// ATTENTION:
//// THIS CODE IS AUTOGENERATED
//// BY hp_emblookup_codegen.py
//// DO NOT MODIFY!!!
//// --------------------------

#pragma once

#include <ATen/core/Half.h>

namespace caffe2 {

void Fused8BitRowwiseEmbeddingLookup_int32_t_float_float_false__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const float* input,
    const int32_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int32_t_float_float_true__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const float* input,
    const int32_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int64_t_float_float_false__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const float* input,
    const int64_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int64_t_float_float_true__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const float* input,
    const int64_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int32_t_half_float_false__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const at::Half* input,
    const int32_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int32_t_half_float_true__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const at::Half* input,
    const int32_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int64_t_half_float_false__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const at::Half* input,
    const int64_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int64_t_half_float_true__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const at::Half* input,
    const int64_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int32_t_uint8_t_float_false__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const uint8_t* input,
    const int32_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int32_t_uint8_t_float_true__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const uint8_t* input,
    const int32_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int64_t_uint8_t_float_false__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const uint8_t* input,
    const int64_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

void Fused8BitRowwiseEmbeddingLookup_int64_t_uint8_t_float_true__avx2_fma(
    const int64_t block_size,
    const int64_t output_size,
    const int64_t index_size,
    const int64_t data_size,
    const uint8_t* input,
    const int64_t* indices,
    const int* lengths,
    const float* weights,
    bool normalize_by_lengths,
    float* out);

} // namespace caffe2
