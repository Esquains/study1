{%- set exclude_test = exclude_test|default(false) -%}
{%- block name -%}
# Template is at:    .github/templates/linux_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: Linux CI (!{{ build_environment }})
{%- endblock %}

on:
  # TODO: Enable pull_request builds when we can verify capacity can be met by auto-scalers
{%- if on_pull_request %}
  pull_request:
  {%- if ciflow_config.enabled %}
    {%- if ciflow_config.trigger_action_only %}
    types: [!{{ ciflow_config.trigger_action }}]
    {%- else %}
    types: [opened, synchronize, reopened, !{{ ciflow_config.trigger_action }}]
    {%- endif %}
  {%- endif %}
{%- endif %}

{%- if is_scheduled %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- else %}
  push:
    branches:
      - master
      - release/*
{%- endif %}
  workflow_dispatch:

env:
  BUILD_ENVIRONMENT: !{{ build_environment }}
  DOCKER_IMAGE_BASE: !{{ docker_image_base }}
  SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
  TORCH_CUDA_ARCH_LIST: 5.2
  IN_CI: 1
  # Used for custom_opertor, jit_hooks, custom_backend, see .jenkins/pytorch/build.sh
  CUSTOM_TEST_ARTIFACT_BUILD_DIR: build/custom_test_artifacts
  ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"

concurrency:
  group: !{{ build_environment }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
{%- if ciflow_config.enabled %}
  !{{ ciflow_config.root_job_name }}:
    runs-on: ubuntu-18.04
    if: !{{ ciflow_config.root_job_condition }}
    steps:
      - name: noop
        run: echo running !{{ ciflow_config.root_job_name }}
{%- endif %}
  calculate-docker-image:
    if: ${{ github.repository_owner == 'pytorch' }}
    runs-on: linux.2xlarge
    needs: [!{{ ciflow_config.root_job_name }}]
    env:
      DOCKER_BUILDKIT: 1
    timeout-minutes: 90
    outputs:
      docker_image: ${{ steps.calculate-tag.outputs.docker_image }}
    steps:
      - name: no op
        run: echo "FAKE CALCULATE DOCKER"
{% block build +%}
  build:
    runs-on: linux.2xlarge
    needs: [calculate-docker-image, !{{ ciflow_config.root_job_name }}]
    env:
      DOCKER_IMAGE: ${{ needs.calculate-docker-image.outputs.docker_image }}
      JOB_BASE_NAME: !{{ build_environment }}-build
    steps:
      - name: Do nothing, pseudo build step
        run: echo "YAY BUILD STEP DONE"
{%- endblock %}
{%- if not exclude_test %}
{% block test +%}
  generate-test-matrix:
    if: ${{ github.repository_owner == 'pytorch' }}
    runs-on: ubuntu-18.04
    needs: [!{{ ciflow_config.root_job_name }}]
    env:
      TEST_RUNNER_TYPE: !{{ test_runner_type }}
      ENABLE_JIT_LEGACY_TEST: !{{ enable_jit_legacy_test }}
      ENABLE_MULTIGPU_TEST: !{{ enable_multigpu_test }}
      ENABLE_NOGPU_NO_AVX_TEST: !{{ enable_nogpu_no_avx_test }}
      ENABLE_NOGPU_NO_AVX2_TEST: !{{ enable_nogpu_no_avx2_test }}
      ENABLE_SLOW_TEST: !{{ enable_slow_test }}
      NUM_TEST_SHARDS: !{{ num_test_shards }}
      MULTIGPU_RUNNER_TYPE: linux.16xlarge.nvidia.gpu
      NOGPU_RUNNER_TYPE: linux.2xlarge
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      render-matrix: ${{ steps.set-matrix.outputs.render-matrix }}
    container:
      image: python:3.9
    steps:
      - name: Install dependencies
        run: pip install typing-extensions
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
      - name: Generating test matrix
        id: set-matrix
        run: .github/scripts/generate_pytorch_test_matrix.py

  test:
    needs: [calculate-docker-image, build, generate-test-matrix, !{{ ciflow_config.root_job_name }}]
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    env:
      DOCKER_IMAGE: ${{ needs.calculate-docker-image.outputs.docker_image }}
      JOB_BASE_NAME: !{{ build_environment }}-test
      TEST_CONFIG: ${{ matrix.config }}
      SHARD_NUMBER: ${{ matrix.shard }}
      NUM_TEST_SHARDS: ${{ matrix.num_shards }}
      RUN_FAILURES_FIRST: ${{ contains(github.event.pull_request.labels.*.name, 'ci/run-failures-first') }}
    steps:
      - name: Get value of RUN_FAILURES_FIRST, as if we are in test-mode
        run: echo "${RUN_FAILURES_FIRST}"
{% endblock %}
{%- endif -%}
{%- if not is_libtorch %}
{% block render_test_results +%}
  # this is a separate step from test because the log files from test are too
  # long: basically, GitHub tries to render all of the log files when you click
  # through an action causing extreme slowdown on actions that contain too many
  # logs (like test); we can always move it back to the other one, but it
  # doesn't create the best experience
  render_test_results:
    if: always()
    needs: [generate-test-matrix, test, !{{ ciflow_config.root_job_name }}]
    runs-on: linux.2xlarge
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.render-matrix) }}
      fail-fast: false
    steps:
      - name: Do nothing
        run: echo "doing nothing"
{%- endblock %}
{%- endif -%}
  {%- if enable_doc_jobs %}

  pytorch_python_doc_build:
    runs-on: linux.2xlarge
    needs: [calculate-docker-image, build, !{{ ciflow_config.root_job_name }}]
    env:
      DOCKER_IMAGE: ${{ needs.calculate-docker-image.outputs.docker_image }}
    steps:
      - name: Log in to ECR
        run: |
          aws ecr get-login --no-include-email --region us-east-1 > /tmp/ecr-login.sh
          bash /tmp/ecr-login.sh
          rm /tmp/ecr-login.sh
      - name: Chown workspace
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v "${ALPINE_IMAGE}" chown -R "$(id -u):$(id -g)" .
      - name: Clean workspace
        run: |
          rm -rf "${GITHUB_WORKSPACE:?}/*"
      - name: Checkout PyTorch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # deep clone, to allow sharding to use git rev-list
          submodules: recursive
      - name: Pull docker image
        run: |
          docker pull "${DOCKER_IMAGE}"
      - name: Preserve github env variables for use in docker
        run: |
          env | grep '^GITHUB' > "/tmp/github_env_${GITHUB_RUN_ID}"
      - uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        name: Download PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
      - name: Unzip artifacts
        run: |
          unzip -o artifacts.zip
      - name: Build Python Doc in Docker
        run: |
          set -ex
          time docker pull "${DOCKER_IMAGE}" > /dev/null
          echo "${GITHUB_REF}"
          ref=${GITHUB_REF##*/}
          target=${ref//v}
          docker run \
            -e BUILD_ENVIRONMENT \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e IN_CI \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e CIRCLE_SHA1="$GITHUB_SHA" \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --name="$GITHUB_SHA" \
            --tty \
            --user jenkins \
            -v "${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace" \
            -w /var/lib/jenkins/workspace \
            "${DOCKER_IMAGE}" \
            bash -c "sudo chown -R jenkins . && pip install dist/*.whl && ./.circleci/scripts/python_doc_push_script.sh docs/$target $target site"
      - name: Chown workspace
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v "${ALPINE_IMAGE}" chown -R "$(id -u):$(id -g)" .
      - uses: driazati/upload-artifact-s3@21c31d0a7bcb056ca50bd6ce197ba6507c26a1be
        if: github.event_name == 'pull_request'
        name: Upload Docs Preview
        with:
          name: deploy
          retention-days: 14
          if-no-files-found: error
          path: pytorch.github.io/docs/merge
      - name: Show Docs Preview URL (Click Me)
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "See rendered docs at https://docs-preview.pytorch.org/$PR_NUMBER/"
      - name: Archive artifacts into zip
        run: |
          zip -r pytorch_github_io.zip "${GITHUB_WORKSPACE}/pytorch.github.io"
      - uses: actions/upload-artifact@v2
        name: Store PyTorch Build Artifacts
        with:
          name: pytorch_github_io
          if-no-files-found: error
          path: pytorch_github_io.zip
      - name: Clean up docker images
        if: always()
        run: |
          # Prune all of the docker images
          docker system prune -af

  {%- endif -%}
