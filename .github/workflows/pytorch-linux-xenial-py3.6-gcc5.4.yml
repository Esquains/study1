# @generated DO NOT EDIT MANUALLY
# Template is at:    .github/templates/linux_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: Linux CI (pytorch-linux-xenial-py3.6-gcc5.4)

on:
  # TODO: Enable pull_request builds when we can verify capacity can be met by auto-scalers
  pull_request:
  push:
    branches:
      - master
      - release/*
  workflow_dispatch:

env:
  BUILD_ENVIRONMENT: pytorch-linux-xenial-py3.6-gcc5.4
  DOCKER_IMAGE_BASE: 308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-xenial-py3.6-gcc5.4
  SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
  TORCH_CUDA_ARCH_LIST: 5.2
  IN_CI: 1
  # Used for custom_opertor, jit_hooks, custom_backend, see .jenkins/pytorch/build.sh
  CUSTOM_TEST_ARTIFACT_BUILD_DIR: build/custom_test_artifacts
  ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"

concurrency:
  group: pytorch-linux-xenial-py3.6-gcc5.4-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  calculate-docker-image:
    if: ${{ github.repository_owner == 'pytorch' }}
    runs-on: linux.2xlarge
    needs: []
    env:
      DOCKER_BUILDKIT: 1
    timeout-minutes: 90
    outputs:
      docker_image: ${{ steps.calculate-tag.outputs.docker_image }}
    steps:
      - name: no op
        run: echo "FAKE CALCULATE DOCKER"

  build:
    runs-on: linux.2xlarge
    needs: [calculate-docker-image, ]
    env:
      DOCKER_IMAGE: ${{ needs.calculate-docker-image.outputs.docker_image }}
      JOB_BASE_NAME: pytorch-linux-xenial-py3.6-gcc5.4-build
    steps:
      - name: Do nothing, pseudo build step
        run: echo "YAY BUILD STEP DONE"

  generate-test-matrix:
    if: ${{ github.repository_owner == 'pytorch' }}
    runs-on: ubuntu-18.04
    needs: []
    env:
      TEST_RUNNER_TYPE: linux.2xlarge
      ENABLE_JIT_LEGACY_TEST: ''
      ENABLE_MULTIGPU_TEST: ''
      ENABLE_NOGPU_NO_AVX_TEST: ''
      ENABLE_NOGPU_NO_AVX2_TEST: ''
      ENABLE_SLOW_TEST: ''
      NUM_TEST_SHARDS: 2
      MULTIGPU_RUNNER_TYPE: linux.16xlarge.nvidia.gpu
      NOGPU_RUNNER_TYPE: linux.2xlarge
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      render-matrix: ${{ steps.set-matrix.outputs.render-matrix }}
    container:
      image: python:3.9
    steps:
      - name: Install dependencies
        run: pip install typing-extensions
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
      - name: Generating test matrix
        id: set-matrix
        run: .github/scripts/generate_pytorch_test_matrix.py

  test:
    needs: [calculate-docker-image, build, generate-test-matrix, ]
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    env:
      DOCKER_IMAGE: ${{ needs.calculate-docker-image.outputs.docker_image }}
      JOB_BASE_NAME: pytorch-linux-xenial-py3.6-gcc5.4-test
      TEST_CONFIG: ${{ matrix.config }}
      SHARD_NUMBER: ${{ matrix.shard }}
      NUM_TEST_SHARDS: ${{ matrix.num_shards }}
      RUN_FAILURES_FIRST: ${{ contains(github.event.pull_request.labels.*.name, 'ci/run-failures-first') }}
    steps:
      - name: Get value of RUN_FAILURES_FIRST, as if we are in test-mode
        run: echo ${RUN_FAILURES_FIRST}


  # this is a separate step from test because the log files from test are too
  # long: basically, GitHub tries to render all of the log files when you click
  # through an action causing extreme slowdown on actions that contain too many
  # logs (like test); we can always move it back to the other one, but it
  # doesn't create the best experience
  render_test_results:
    if: always()
    needs: [generate-test-matrix, test, ]
    runs-on: linux.2xlarge
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.render-matrix) }}
      fail-fast: false
    steps:
      - name: Do nothing
        run: echo "doing nothing"
