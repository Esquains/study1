from typing import List, Tuple, Optional, Union, Any, ContextManager, Callable, overload

import builtins
import math
import pickle  # ???

class dtype: ...
# See https://github.com/python/mypy/issues/4146 for why this workaround
# is necessary
_dtype = dtype

class layout: ...

strided : layout = ...

class device:
   def __init__(self, device: Union['_device', str, None]=None) -> None: ...

_device = device

class Generator: ...

class Size(tuple): ...

class Storage: ...

class enable_grad():
    def __enter__(self) -> None: ...
    def __exit__(self, *args) -> None: ...
    def __call__(self, func : Callable) -> Callable: ...

class no_grad():
    def __enter__(self) -> None: ...
    def __exit__(self, *args) -> None: ...
    def __call__(self, func : Callable) -> Callable: ...

class set_grad_enabled():
    def __init__(self, mode: bool) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *args) -> None: ...

class Tensor:
    dtype: _dtype = ...
    shape: Size = ...
    device: _device = ...
    requires_grad: bool = ...
    grad: Optional['Tensor'] = ...

    {tensor_methods}

{functions}

{legacy_classes}

{dtype_classes}
