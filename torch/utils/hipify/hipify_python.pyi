from . import constants as constants
from .cuda_to_hip_mappings import CUDA_TO_HIP_MAPPINGS as CUDA_TO_HIP_MAPPINGS, MATH_TRANSPILATIONS as MATH_TRANSPILATIONS
from collections.abc import Iterable
from typing import Any, Dict, Iterator, List, Optional

HipifyResult = Dict[str, Optional[str]]
HipifyFinalResult = Dict[str, HipifyResult]
HIPIFY_C_BREADCRUMB: str
HIPIFY_FINAL_RESULT: HipifyFinalResult
PYTORCH_TEMPLATE_MAP: Any

class InputError(Exception):
    message: Any = ...
    def __init__(self, message: Any) -> None: ...

def openf(filename: Any, mode: Any): ...

class bcolors:
    HEADER: str = ...
    OKBLUE: str = ...
    OKGREEN: str = ...
    WARNING: str = ...
    FAIL: str = ...
    ENDC: str = ...
    BOLD: str = ...
    UNDERLINE: str = ...

class GeneratedFileCleaner:
    keep_intermediates: Any = ...
    files_to_clean: Any = ...
    dirs_to_clean: Any = ...
    def __init__(self, keep_intermediates: bool = ...) -> None: ...
    def __enter__(self): ...
    def open(self, fn: Any, *args: Any, **kwargs: Any): ...
    def makedirs(self, dn: Any, exist_ok: bool = ...) -> None: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

def match_extensions(filename: str, extensions: Iterable) -> bool: ...
def matched_files_iter(root_path: str, includes: Iterable=..., ignores: Iterable=..., extensions: Iterable=..., out_of_place_only: bool=..., is_pytorch_extension: bool=...) -> Iterator[str]: ...
def preprocess_file_and_save_result(output_directory: str, filepath: str, all_files: Iterable, header_include_dirs: Iterable, stats: Dict[str, List], hip_clang_launch: bool, is_pytorch_extension: bool, clean_ctx: GeneratedFileCleaner, show_progress: bool) -> None: ...
def compute_stats(stats: Any) -> None: ...
def add_dim3(kernel_string: Any, cuda_kernel: Any): ...

RE_KERNEL_LAUNCH: Any

def processKernelLaunches(string: Any, stats: Any): ...
def find_closure_group(input_string: Any, start: Any, group: Any): ...
def find_bracket_group(input_string: Any, start: Any): ...
def find_parentheses_group(input_string: Any, start: Any): ...

RE_ASSERT: Any

def replace_math_functions(input_string: Any): ...

RE_SYNCTHREADS: Any

def hip_header_magic(input_string: Any): ...

RE_EXTERN_SHARED: Any

def replace_extern_shared(input_string: Any): ...
def get_hip_file_path(rel_filepath: Any, is_pytorch_extension: bool = ...): ...
def is_out_of_place(rel_filepath: Any): ...
def is_pytorch_file(rel_filepath: Any): ...
def is_cusparse_file(rel_filepath: Any): ...
def is_caffe2_gpu_file(rel_filepath: Any): ...

class Trie:
    data: Any = ...
    def __init__(self) -> None: ...
    def add(self, word: Any) -> None: ...
    def dump(self): ...
    def quote(self, char: Any): ...
    def pattern(self): ...

CAFFE2_TRIE: Any
CAFFE2_MAP: Any
PYTORCH_TRIE: Any
PYTORCH_MAP: Dict[str, object]
PYTORCH_SPARSE_MAP: Any
dst: Any
meta_data: Any
RE_CAFFE2_PREPROCESSOR: Any
RE_PYTORCH_PREPROCESSOR: Any
RE_QUOTE_HEADER: Any
RE_ANGLE_HEADER: Any
RE_THC_GENERIC_FILE: Any
RE_CU_SUFFIX: Any

def preprocessor(output_directory: str, filepath: str, all_files: Iterable, header_include_dirs: Iterable, stats: Dict[str, List], hip_clang_launch: bool, is_pytorch_extension: bool, clean_ctx: GeneratedFileCleaner, show_progress: bool) -> HipifyResult: ...
def file_specific_replacement(filepath: Any, search_string: Any, replace_string: Any, strict: bool = ...): ...
def file_add_header(filepath: Any, header: Any) -> None: ...
def fix_static_global_kernels(in_txt: Any): ...

RE_INCLUDE: Any

def extract_arguments(start: Any, string: Any): ...
def str2bool(v: Any): ...
def hipify(project_directory: str, show_detailed: bool=..., extensions: Iterable=..., header_extensions: Iterable=..., output_directory: str=..., header_include_dirs: Iterable=..., includes: Iterable=..., extra_files: Iterable=..., out_of_place_only: bool=..., ignores: Iterable=..., show_progress: bool=..., hip_clang_launch: bool=..., is_pytorch_extension: bool=..., hipify_extra_files_only: bool=..., clean_ctx: Optional[GeneratedFileCleaner]=...) -> HipifyFinalResult: ...
