# DO NOT EDIT! This file was generated by jschema_to_python version 0.0.1.dev29,
# with extension for dataclasses and type annotation.

from __future__ import annotations

import dataclasses
from typing import List, Literal, Optional

from torch.onnx._internal.diagnostics.infra.sarif import (
    _address,
    _artifact,
    _conversion,
    _graph,
    _invocation,
    _logical_location,
    _property_bag,
    _result,
    _thread_flow_location,
    _tool_component,
    _web_request,
    _web_response,
)


@dataclasses.dataclass
class ExternalProperties:
    """The top-level element of an external property file."""

    addresses: list[_address.Address] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "addresses"}
    )
    artifacts: list[_artifact.Artifact] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "artifacts"}
    )
    conversion: _conversion.Conversion | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "conversion"}
    )
    driver: _tool_component.ToolComponent | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "driver"}
    )
    extensions: list[_tool_component.ToolComponent] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "extensions"}
    )
    externalized_properties: _property_bag.PropertyBag | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "externalizedProperties"}
    )
    graphs: list[_graph.Graph] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "graphs"}
    )
    guid: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "guid"}
    )
    invocations: list[_invocation.Invocation] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "invocations"}
    )
    logical_locations: None | (
        list[_logical_location.LogicalLocation]
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "logicalLocations"}
    )
    policies: list[_tool_component.ToolComponent] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "policies"}
    )
    properties: _property_bag.PropertyBag | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "properties"}
    )
    results: list[_result.Result] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "results"}
    )
    run_guid: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "runGuid"}
    )
    schema: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "schema"}
    )
    taxonomies: list[_tool_component.ToolComponent] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "taxonomies"}
    )
    thread_flow_locations: None | (
        list[_thread_flow_location.ThreadFlowLocation]
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "threadFlowLocations"}
    )
    translations: list[_tool_component.ToolComponent] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "translations"}
    )
    version: Literal["2.1.0"] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "version"}
    )
    web_requests: list[_web_request.WebRequest] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "webRequests"}
    )
    web_responses: list[_web_response.WebResponse] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "webResponses"}
    )


# flake8: noqa
