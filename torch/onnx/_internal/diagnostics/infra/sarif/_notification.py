# DO NOT EDIT! This file was generated by jschema_to_python version 0.0.1.dev29,
# with extension for dataclasses and type annotation.

from __future__ import annotations

import dataclasses
from typing import List, Literal, Optional

from torch.onnx._internal.diagnostics.infra.sarif import (
    _exception,
    _location,
    _message,
    _property_bag,
    _reporting_descriptor_reference,
)


@dataclasses.dataclass
class Notification:
    """Describes a condition relevant to the tool itself, as opposed to being relevant to a target being analyzed by the tool."""

    message: _message.Message = dataclasses.field(
        metadata={"schema_property_name": "message"}
    )
    associated_rule: None | (
        _reporting_descriptor_reference.ReportingDescriptorReference
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "associatedRule"}
    )
    descriptor: None | (
        _reporting_descriptor_reference.ReportingDescriptorReference
    ) = dataclasses.field(default=None, metadata={"schema_property_name": "descriptor"})
    exception: _exception.Exception | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "exception"}
    )
    level: Literal["none", "note", "warning", "error"] = dataclasses.field(
        default="warning", metadata={"schema_property_name": "level"}
    )
    locations: list[_location.Location] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "locations"}
    )
    properties: _property_bag.PropertyBag | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "properties"}
    )
    thread_id: int | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "threadId"}
    )
    time_utc: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "timeUtc"}
    )


# flake8: noqa
