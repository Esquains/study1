# DO NOT EDIT! This file was generated by jschema_to_python version 0.0.1.dev29,
# with extension for dataclasses and type annotation.

from __future__ import annotations

import dataclasses
from typing import Any, List, Literal, Optional

from torch.onnx._internal.diagnostics.infra.sarif import (
    _artifact_location,
    _multiformat_message_string,
    _property_bag,
    _reporting_descriptor,
    _tool_component_reference,
    _translation_metadata,
)


@dataclasses.dataclass
class ToolComponent:
    """A component, such as a plug-in or the driver, of the analysis tool that was run."""

    name: str = dataclasses.field(metadata={"schema_property_name": "name"})
    associated_component: None | (
        _tool_component_reference.ToolComponentReference
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "associatedComponent"}
    )
    contents: list[Literal["localizedData", "nonLocalizedData"]] = dataclasses.field(
        default_factory=lambda: ["localizedData", "nonLocalizedData"],
        metadata={"schema_property_name": "contents"},
    )
    dotted_quad_file_version: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "dottedQuadFileVersion"}
    )
    download_uri: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "downloadUri"}
    )
    full_description: None | (
        _multiformat_message_string.MultiformatMessageString
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "fullDescription"}
    )
    full_name: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "fullName"}
    )
    global_message_strings: Any = dataclasses.field(
        default=None, metadata={"schema_property_name": "globalMessageStrings"}
    )
    guid: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "guid"}
    )
    information_uri: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "informationUri"}
    )
    is_comprehensive: bool | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "isComprehensive"}
    )
    language: str = dataclasses.field(
        default="en-US", metadata={"schema_property_name": "language"}
    )
    localized_data_semantic_version: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "localizedDataSemanticVersion"}
    )
    locations: list[_artifact_location.ArtifactLocation] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "locations"}
    )
    minimum_required_localized_data_semantic_version: str | None = dataclasses.field(
        default=None,
        metadata={
            "schema_property_name": "minimumRequiredLocalizedDataSemanticVersion"
        },
    )
    notifications: None | (
        list[_reporting_descriptor.ReportingDescriptor]
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "notifications"}
    )
    organization: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "organization"}
    )
    product: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "product"}
    )
    product_suite: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "productSuite"}
    )
    properties: _property_bag.PropertyBag | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "properties"}
    )
    release_date_utc: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "releaseDateUtc"}
    )
    rules: None | (
        list[_reporting_descriptor.ReportingDescriptor]
    ) = dataclasses.field(default=None, metadata={"schema_property_name": "rules"})
    semantic_version: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "semanticVersion"}
    )
    short_description: None | (
        _multiformat_message_string.MultiformatMessageString
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "shortDescription"}
    )
    supported_taxonomies: None | (
        list[_tool_component_reference.ToolComponentReference]
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "supportedTaxonomies"}
    )
    taxa: list[_reporting_descriptor.ReportingDescriptor] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "taxa"}
    )
    translation_metadata: None | (
        _translation_metadata.TranslationMetadata
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "translationMetadata"}
    )
    version: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "version"}
    )


# flake8: noqa
