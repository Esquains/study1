# DO NOT EDIT! This file was generated by jschema_to_python version 0.0.1.dev29,
# with extension for dataclasses and type annotation.

from __future__ import annotations

import dataclasses
from typing import Any, List, Literal, Optional

from torch.onnx._internal.diagnostics.infra.sarif import (
    _artifact_location,
    _attachment,
    _code_flow,
    _fix,
    _graph,
    _graph_traversal,
    _location,
    _message,
    _property_bag,
    _reporting_descriptor_reference,
    _result_provenance,
    _stack,
    _suppression,
    _web_request,
    _web_response,
)


@dataclasses.dataclass
class Result:
    """A result produced by an analysis tool."""

    message: _message.Message = dataclasses.field(
        metadata={"schema_property_name": "message"}
    )
    analysis_target: _artifact_location.ArtifactLocation | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "analysisTarget"}
    )
    attachments: list[_attachment.Attachment] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "attachments"}
    )
    baseline_state: None | (
        Literal["new", "unchanged", "updated", "absent"]
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "baselineState"}
    )
    code_flows: list[_code_flow.CodeFlow] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "codeFlows"}
    )
    correlation_guid: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "correlationGuid"}
    )
    fingerprints: Any = dataclasses.field(
        default=None, metadata={"schema_property_name": "fingerprints"}
    )
    fixes: list[_fix.Fix] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "fixes"}
    )
    graph_traversals: None | (
        list[_graph_traversal.GraphTraversal]
    ) = dataclasses.field(
        default=None, metadata={"schema_property_name": "graphTraversals"}
    )
    graphs: list[_graph.Graph] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "graphs"}
    )
    guid: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "guid"}
    )
    hosted_viewer_uri: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "hostedViewerUri"}
    )
    kind: Literal[
        "notApplicable", "pass", "fail", "review", "open", "informational"
    ] = dataclasses.field(default="fail", metadata={"schema_property_name": "kind"})
    level: Literal["none", "note", "warning", "error"] = dataclasses.field(
        default="warning", metadata={"schema_property_name": "level"}
    )
    locations: list[_location.Location] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "locations"}
    )
    occurrence_count: int | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "occurrenceCount"}
    )
    partial_fingerprints: Any = dataclasses.field(
        default=None, metadata={"schema_property_name": "partialFingerprints"}
    )
    properties: _property_bag.PropertyBag | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "properties"}
    )
    provenance: _result_provenance.ResultProvenance | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "provenance"}
    )
    rank: float = dataclasses.field(
        default=-1.0, metadata={"schema_property_name": "rank"}
    )
    related_locations: list[_location.Location] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "relatedLocations"}
    )
    rule: None | (
        _reporting_descriptor_reference.ReportingDescriptorReference
    ) = dataclasses.field(default=None, metadata={"schema_property_name": "rule"})
    rule_id: str | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "ruleId"}
    )
    rule_index: int = dataclasses.field(
        default=-1, metadata={"schema_property_name": "ruleIndex"}
    )
    stacks: list[_stack.Stack] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "stacks"}
    )
    suppressions: list[_suppression.Suppression] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "suppressions"}
    )
    taxa: None | (
        list[_reporting_descriptor_reference.ReportingDescriptorReference]
    ) = dataclasses.field(default=None, metadata={"schema_property_name": "taxa"})
    web_request: _web_request.WebRequest | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "webRequest"}
    )
    web_response: _web_response.WebResponse | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "webResponse"}
    )
    work_item_uris: list[str] | None = dataclasses.field(
        default=None, metadata={"schema_property_name": "workItemUris"}
    )


# flake8: noqa
